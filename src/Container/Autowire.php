<?php
/**
 * Created by PhpStorm.
 * User: albertsultanov
 * Date: 27.02.17
 * Time: 1:24
 */

namespace vivace\di\Container;


use Psr\Container\ContainerInterface;
use vivace\di\BadDefinitionError;
use vivace\di\Factory;
use vivace\di\Factory\Instance;
use vivace\di\ImportFailureError;
use vivace\di\NotFoundError;
use vivace\di\Resolver;
use vivace\di\Scope;
use vivace\di\Scope\Node;

class Autowire implements ContainerInterface
{
    private $factories = [];

    /** @inheritdoc */
    public function get($id):Factory
    {
        if (isset($this->factories[$id])) {
            return $this->factories[$id];
        }
        return new class($id, $this->factories) extends Instance
        {
            /** @var */
            private $factories;

            public function __construct($className, &$factories)
            {
                parent::__construct($className);
                $this->factories = &$factories;
            }

            private function bind()
            {
                if (isset($this->factories) && !isset($this->factories[$this->getClassName()])) {
                    $this->factories[$this->getClassName()] = $this;
                    unset($this->factories);
                }
            }

            public function asService($value = true): Factory
            {
                $this->bind();
                return parent::asService($value); // TODO: Change the autogenerated stub
            }

            public function setArguments(array $arguments): Factory
            {
                $this->bind();
                return parent::setArguments($arguments); // TODO: Change the autogenerated stub
            }

            public function setUp(callable $function): Factory
            {
                $this->bind();
                return parent::setUp($function); // TODO: Change the autogenerated stub
            }

            public function produce(Scope $scope)
            {
                try {
                    return $scope->import($this->getClassName());
                } catch (ImportFailureError $e) {
                    $scope = new Node($scope, new Base([
                        Resolver::class => function (Scope $scope) {
                            return new Resolver($scope);
                        },
                    ])
                    );
                    try {
                        return parent::produce($scope);
                    } catch (BadDefinitionError $e) {
                        throw new NotFoundError($e->getMessage());
                    }
                }
            }
        };
    }

    /** @inheritdoc */
    public function has($id): bool
    {
        return class_exists($id);
    }
}